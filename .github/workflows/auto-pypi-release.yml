name: 🚀 Auto PyPI Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build pytest flake8
        pip install -e .
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        # Run full linting with configuration from .flake8
        flake8 src --count --statistics
    
    - name: Test package import
      run: |
        python -c "import sienge_mcp; print('✅ Package imports successfully')"

  get-version:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install toml
    
    - name: Get current version
      id: version
      run: |
        python << 'EOF'
        import toml
        import os
        
        # Read current version
        with open('pyproject.toml', 'r') as f:
            data = toml.load(f)
        
        current_version = data['project']['version']
        print(f"Current version: {current_version}")
        
        # Set outputs
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"version={current_version}\n")
        EOF

  build-and-publish:
    needs: [test, get-version]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main  # Get the latest commit with version update
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        python -m twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.get-version.outputs.version }}
        name: 🚀 Release v${{ needs.get-version.outputs.version }}
        body: |
          ## 🚀 Auto Release v${{ needs.get-version.outputs.version }}
          
          ### 📦 **What's New**
          - Automated release from commit: ${{ github.sha }}
          - Built and published to PyPI automatically
          - Version auto-incremented based on commits
          
          ### 📦 **Installation**
          ```bash
          pip install --upgrade sienge-ecbiesek-mcp
          # or
          pipx install sienge-ecbiesek-mcp@latest
          ```
          
          ### 🔗 **Links**
          - **PyPI**: https://pypi.org/project/sienge-ecbiesek-mcp/${{ needs.get-version.outputs.version }}/
          - **Commit**: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}
          
          **Developed by INOTECH-ecbiesek** 🚀
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [build-and-publish, get-version]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Notify Success
      if: needs.build-and-publish.result == 'success'
      run: |
        echo "✅ Successfully published v${{ needs.get-version.outputs.version }} to PyPI!"
        echo "🔗 https://pypi.org/project/sienge-ecbiesek-mcp/${{ needs.get-version.outputs.version }}/"
    
    - name: Notify Failure
      if: needs.build-and-publish.result == 'failure'
      run: |
        echo "❌ Failed to publish to PyPI"
        exit 1